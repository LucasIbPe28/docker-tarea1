# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import spacex_pb2 as spacex__pb2


class LaunchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLaunches = channel.unary_unary(
                '/spacex.LaunchService/GetLaunches',
                request_serializer=spacex__pb2.LaunchRequest.SerializeToString,
                response_deserializer=spacex__pb2.LaunchResponse.FromString,
                )


class LaunchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLaunches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LaunchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLaunches': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLaunches,
                    request_deserializer=spacex__pb2.LaunchRequest.FromString,
                    response_serializer=spacex__pb2.LaunchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spacex.LaunchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LaunchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLaunches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spacex.LaunchService/GetLaunches',
            spacex__pb2.LaunchRequest.SerializeToString,
            spacex__pb2.LaunchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
